<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java笔记：IO流基础</title>
    <link href="/2023/11/Java%E7%AC%94%E8%AE%B0%EF%BC%9AIO%E6%B5%81%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/11/Java%E7%AC%94%E8%AE%B0%EF%BC%9AIO%E6%B5%81%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>本文为课程<a href="https://www.bilibili.com/video/BV1Cv411372m">BV1Cv411372m</a>的笔记，内容浅显，仅供参考。</p><span id="more"></span><h2 id="FILE"><a href="#FILE" class="headerlink" title="FILE()"></a>FILE()</h2><h3 id="创建FILE对象"><a href="#创建FILE对象" class="headerlink" title="创建FILE对象"></a>创建FILE对象</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/resource/ab.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 文件大小</span><span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不是整个文件夹所有文件的大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="获取FILE信息"><a href="#获取FILE信息" class="headerlink" title="获取FILE信息"></a>获取FILE信息</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断文件存在</span>f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断文件</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断文件夹</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 最后修改时间</span>f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取创建时的路径</span>f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取绝对路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="创建与删除文件"><a href="#创建与删除文件" class="headerlink" title="创建与删除文件"></a>创建与删除文件</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建文件</span><span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/resource/node2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建文件夹，只能创建一级</span><span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/resource/aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用于创建文件夹，可以创建多级</span><span class="token class-name">File</span> f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/resource/bbb/ccc/ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除文件或空文件夹，不能删除非空文件夹</span>f1<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="遍历文件夹"><a href="#遍历文件夹" class="headerlink" title="遍历文件夹"></a>遍历文件夹</h3><ol><li><code>list()</code>：获取所有一级文件<strong>名称</strong></li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/resource/aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><ol start="2"><li><code>listFiles()</code>：获取所有一级文件<strong>对象</strong><ul><li>主调为文件或路径不存在，返回null</li><li>主调为空文件夹，返回长度为0的数组</li><li>没有访问权限，返回null</li></ul></li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/resource/aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="IO流体系"><a href="#IO流体系" class="headerlink" title="IO流体系"></a>IO流体系</h2><table><thead><tr><th></th><th>字节流</th><th></th><th>字符流</th><th></th></tr></thead><tbody><tr><td></td><td>IN</td><td>Out</td><td>IN</td><td>OUT</td></tr><tr><td>抽象类</td><td>InputStream</td><td>OutputStream</td><td>Reader</td><td>Writer</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>原始流</td><td>FileInputStream</td><td>FileOutputSteam</td><td>FileReader</td><td>FileWriter</td></tr><tr><td>缓冲流</td><td>BufferedInputStream</td><td>BufferedOutputStream</td><td>BufferedReader</td><td>BufferedWriter</td></tr><tr><td>转换流</td><td></td><td></td><td>InputStreamReader</td><td>OutputStreamWriter</td></tr><tr><td>打印流</td><td></td><td>PrintStream</td><td></td><td>PrintWriter</td></tr><tr><td>数据流</td><td>DataInputStream</td><td>DataOutputStream</td><td></td><td></td></tr><tr><td>序列化流</td><td>ObjectInputStream</td><td>ObjectOutputStream</td><td></td><td></td></tr></tbody></table><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ul><li><p>ASCII：1个字节存储一个字符</p></li><li><p>GBK：2个字节存储一个中文字符，汉字第一个字节的第一位一定是1</p></li><li><p>UTF-8（Unicode）：可变长度编码，英文数字只占1个字节，汉字占用3个字节</p></li></ul><h3 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h3><h4 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h4><p>只要虚拟机不终止，则一定会执行finally区。</p><p>不要在finally区中进行<code>return</code>操作，这样会覆盖之前返回的数据。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 这里也需要捕获异常，此处省略</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>os <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>is <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="try-with-resource"><a href="#try-with-resource" class="headerlink" title="try-with-resource"></a>try-with-resource</h4><p>资源使用完毕后，自动调用<code>close()</code>方法进行释放。</p><p>只能放置实现<code>AutoCloseable</code>接口的资源对象。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 具体操作</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="字节输入流：FileInputStream"><a href="#字节输入流：FileInputStream" class="headerlink" title="字节输入流：FileInputStream"></a>字节输入流：FileInputStream</h3><h4 id="创建管道"><a href="#创建管道" class="headerlink" title="创建管道"></a>创建管道</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 传入文件对象</span><span class="token class-name">FileInputStream</span> is1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 传入路径</span><span class="token class-name">FileInputStream</span> is2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 记得用完释放资源</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="每次读取一个字节"><a href="#每次读取一个字节" class="headerlink" title="每次读取一个字节"></a>每次读取一个字节</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取一个字节，读完返回-1</span><span class="token comment">// 使用循环读取</span><span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="每次读取多个字节"><a href="#每次读取多个字节" class="headerlink" title="每次读取多个字节"></a>每次读取多个字节</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 字节数组</span><span class="token keyword">int</span> len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回读取的字节数量，读完返回-1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按照读取字节数量来输出字符串</span><span class="token comment">// 使用循环</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="一次读取全部字节"><a href="#一次读取全部字节" class="headerlink" title="一次读取全部字节"></a>一次读取全部字节</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 准备一个和文件一样大的字节数组</span><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> size <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 转换成int型</span><span class="token keyword">int</span> len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用readAllBytes方法</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取所有字节</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="字节输出流：FileOutputSteam"><a href="#字节输出流：FileOutputSteam" class="headerlink" title="字节输出流：FileOutputSteam"></a>字节输出流：FileOutputSteam</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写字节</span>os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 代表a</span>os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写字节数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span><span class="token string">"我爱你中国abc"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从哪开始写多长</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="追加输出"><a href="#追加输出" class="headerlink" title="追加输出"></a>追加输出</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置为追加输出</span><span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不能直接写字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><h3 id="字符输入流：FileReader"><a href="#字符输入流：FileReader" class="headerlink" title="字符输入流：FileReader"></a>字符输入流：FileReader</h3><p>一次读一个字符，不会出现乱码问题。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Reader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 每次读一个字符</span><span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 每次读多个字符</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="字符输出流：FileWriter"><a href="#字符输出流：FileWriter" class="headerlink" title="字符输出流：FileWriter"></a>字符输出流：FileWriter</h3><p>支持在管道处设置<code>true</code>来设置<a href="#%E8%BF%BD%E5%8A%A0%E8%BE%93%E5%87%BA">追加模式</a>。</p><p>字符输出流写出数据后，必须<strong>刷新<code>flush()</code>或关闭<code>close()</code>流</strong>，写出去的数据才能生效。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Writer</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写字符</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 代表a</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">'大'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写字符串</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"字符输出流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"字符输出流"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从哪开始写多长</span><span class="token comment">// 写字符数组</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'字'</span><span class="token punctuation">,</span> <span class="token string">"符"</span><span class="token punctuation">,</span> <span class="token string">"串"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从哪开始写多长</span><span class="token comment">// 换行</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><h3 id="字节缓冲流：BufferedInput-OutputStream"><a href="#字节缓冲流：BufferedInput-OutputStream" class="headerlink" title="字节缓冲流：BufferedInput&#x2F;OutputStream"></a>字节缓冲流：BufferedInput&#x2F;OutputStream</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用字节缓冲流包装原始流</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置缓冲池大小</span><span class="token class-name">InputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="字符缓冲流：BufferedReader-Writer"><a href="#字符缓冲流：BufferedReader-Writer" class="headerlink" title="字符缓冲流：BufferedReader&#x2F;Writer"></a>字符缓冲流：BufferedReader&#x2F;Writer</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 字符缓冲输入流：BufferedReader</span><span class="token class-name">Reader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按行读取，读完返回null</span><span class="token class-name">String</span> line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 字符缓冲输入流：BufferedReader</span><span class="token class-name">Writer</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 换行</span>bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p>把原始的<strong>字节</strong>输入流，按照指定编码转成<strong>字符</strong>输入流。</p><h3 id="字符输入转换流：InputStreamReader"><a href="#字符输入转换流：InputStreamReader" class="headerlink" title="字符输入转换流：InputStreamReader"></a>字符输入转换流：InputStreamReader</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 原始的字节输入流</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 转换成指定编码的字符输入流</span><span class="token class-name">Reader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 包装成缓冲字符输入流</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="字符输出转换流：OutputStreamWriter"><a href="#字符输出转换流：OutputStreamWriter" class="headerlink" title="字符输出转换流：OutputStreamWriter"></a>字符输出转换流：OutputStreamWriter</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 原始的字节输出流</span><span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 转换成指定编码的字符输出流</span><span class="token class-name">Writer</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>os<span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 包装成缓冲字符输出流</span><span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>osw<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><h3 id="字节打印流：PrintStream"><a href="#字节打印流：PrintStream" class="headerlink" title="字节打印流：PrintStream"></a>字节打印流：PrintStream</h3><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 常用：传入文件路径String</span><span class="token keyword">public</span> <span class="token class-name">Printstream</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span><span class="token operator">/</span><span class="token class-name">File</span><span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token comment">// 指定编码集</span><span class="token keyword">public</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token class-name">Charset</span> charset<span class="token punctuation">)</span><span class="token comment">// 设定自动刷新</span><span class="token keyword">public</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoFlush<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoFlush<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="打印数据"><a href="#打印数据" class="headerlink" title="打印数据"></a>打印数据</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印输出97</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写入字节a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="字符打印流：PrintWriter"><a href="#字符打印流：PrintWriter" class="headerlink" title="字符打印流：PrintWriter"></a>字符打印流：PrintWriter</h3><p>构造器增加了<code>Writer</code>参数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span><span class="token operator">/</span><span class="token class-name">Writer</span><span class="token operator">/</span><span class="token class-name">File</span><span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>打印功能与<a href="#PrintStream">PrintStream</a>相同。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>不能直接设定追加模式，需要使用低级流包装。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>PrintWriter</code>继承自<code>Writer</code>，所以可以直接写字符。</p><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 修改默认打印流对象</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出重定向"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><h3 id="数据输出流：DataOutputStream"><a href="#数据输出流：DataOutputStream" class="headerlink" title="数据输出流：DataOutputStream"></a>数据输出流：DataOutputStream</h3><p>可以一并写出数据和数据类型。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Data0utputStream</span> dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data0utputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dos<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token number">99.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"数据输出流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// UTF-8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="数据输入流：DataInputStream"><a href="#数据输入流：DataInputStream" class="headerlink" title="数据输入流：DataInputStream"></a>数据输入流：DataInputStream</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注意对应顺序</span>dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dis<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dis<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h2><p>序列化：将对象写入文件中。</p><h3 id="对象字节输出流：ObjectOutputStream"><a href="#对象字节输出流：ObjectOutputStream" class="headerlink" title="对象字节输出流：ObjectOutputStream"></a>对象字节输出流：ObjectOutputStream</h3><p>需要序列化的对象必须实现<code>Serializable</code>接口。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">write0bject</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写入文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>成员变量使用<code>transient</code>修饰，不参与序列化。</p><p>一次性序列化多个对象，可使用<code>ArrayList</code>存储，再将集合对象序列化。<code>ArrayList</code>已经实现了<code>Serializable</code>接口。</p><h3 id="对象字节输入流：ObjectInputStream"><a href="#对象字节输入流：ObjectInputStream" class="headerlink" title="对象字节输入流：ObjectInputStream"></a>对象字节输入流：ObjectInputStream</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">read0bject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回Object类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Properties属性文件"><a href="#Properties属性文件" class="headerlink" title="Properties属性文件"></a>Properties属性文件</h2><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>只能是键值对，key不能重复</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">admin</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span><span class="token key attr-name">user</span><span class="token punctuation">=</span><span class="token value attr-value">老罗</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="Map集合：Properties"><a href="#Map集合：Properties" class="headerlink" title="Map集合：Properties"></a>Map集合：Properties</h3><h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 加载属性文件到对象中</span>p<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/01.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据key取值</span>p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历全部键值对</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> value <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"===>"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>p<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">"===>"</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 加入数据</span>p<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"sam"</span><span class="token punctuation">,</span> <span class="token string">"112233"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 存储到属性文件</span>p<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"src/01.properties"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Comments"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java笔记：集合基础</title>
    <link href="/2023/10/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%9B%86%E5%90%88%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/10/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%9B%86%E5%90%88%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>本文为课程<a href="https://www.bilibili.com/video/BV1Cv411372m">BV1Cv411372m</a>的笔记，内容浅显，仅供参考。</p><span id="more"></span><h2 id="集合的分类"><a href="#集合的分类" class="headerlink" title="集合的分类"></a>集合的分类</h2><ul><li>单列集合<code>Collection</code>：每个元素只包含一个值</li><li>双列集合<code>Map</code>：每个元素包含两个值（键值对）</li></ul><h3 id="Collection体系"><a href="#Collection体系" class="headerlink" title="Collection体系"></a>Collection体系</h3><ul><li><code>Collection&lt;E&gt;</code>（接口）<ul><li><code>List&lt;E&gt;</code>（接口）：有序、可重复、有索引<ul><li><code>ArrayList&lt;E&gt;</code></li><li><code>LinkedList&lt;E&gt;</code></li></ul></li><li><code>Set&lt;E&gt;</code>（接口）：不重复、无索引<ul><li><code>HashSet&lt;E&gt;</code>：<strong>无序</strong><ul><li><code>LinkedHashSet&lt;E&gt;</code>：<strong>有序</strong></li></ul></li><li><code>TreeSet&lt;E&gt;</code>：<strong>默认升序</strong></li></ul></li></ul></li></ul><h3 id="Map体系"><a href="#Map体系" class="headerlink" title="Map体系"></a>Map体系</h3><ul><li><code>Map&lt;K,V&gt;</code>（接口）：不重复、无索引<ul><li><code>HashMap&lt;K,V&gt;</code>：<strong>无序</strong><ul><li><code>LinkedHashMap&lt;K,V&gt;</code>：<strong>有序</strong></li></ul></li><li><code>TreeMap&lt;K,V&gt;</code>：<strong>默认升序</strong></li></ul></li></ul><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection&lt;E&gt;"></a>Collection&lt;E&gt;</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 多态</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加元素，成功返回true</span>c<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断元素是否存在</span>c<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除指定元素（只删第一个）</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将集合转换为数组，使用Object类型（泛型擦除）</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 转换为字符串数组</span>c1<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将c2集合中的数据全部添加至c1集合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>用来遍历集合的专用方式，数组没有迭代器。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> item <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取元素，并移动迭代器位置</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h4><p>可以遍历集合或数组。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">c<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 使用Consumer接口</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><ul><li>使用for循环删除元素时，成功删除后使用<code>i--</code>回退或倒序遍历</li><li>使用迭代器自己的remove()方法</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> name <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"李"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// List.remove(name)// 错误：并发修改异常</span>        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 可变参数本质就是一个数组</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printin</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不传数据</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 传一个数据</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 传多个数据</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 传一个数组</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections()"></a>Collections()</h3><p>用来操作集合的工具类。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 批量添加数据</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打乱数据</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 排序</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ComparatorcStudent</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Student</span> ol<span class="token punctuation">,</span> <span class="token class-name">Student</span> o2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o2<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="List"><a href="#List" class="headerlink" title="List&lt;E&gt;"></a>List&lt;E&gt;</h2><h3 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"KFC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在指定位置增加元素</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除指定位置的元素，返回原数据</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取指定位置的元素</span>list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"KFC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改指定位置的元素，返回原数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>List集合有索引，所以可以使用普通for循环遍历。</p><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList()"></a>ArrayList()</h3><p>基于<strong>数组</strong>实现。</p><ol><li>利用无参构造器创建的集合，会在底层创建一个默认长度为0的空数组</li><li>添加第一个元素时，会创建一个新的长度为10的数组</li><li>存满时，会扩容1.5倍，如果一次添加太多元素则扩容长度以实际所需为准</li></ol><p>优缺点如下：</p><ul><li>根据索引查数据快，适合经常查询数据或数据量不大的场景</li><li>添加删除效率低，需要移动大量数据，不适合频繁增删改查</li></ul><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList()"></a>LinkedList()</h3><p>基于<strong>双链表</strong>实现。</p><p>增加了许多首位操作的特有方法：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token comment">// push(E e)</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// pop()</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>优缺点如下：</p><ul><li>查询较慢，增删较快，尤其是增删改查<strong>首尾元素</strong></li><li>可以用来设计队列和栈</li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set&lt;E&gt;"></a>Set&lt;E&gt;</h2><h3 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h3><p>Java中每个对象都有一个哈希值（int型）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">s<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取哈希值（Object类提供的方法）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet()"></a>HashSet()</h3><p>基于<strong>哈希表</strong>实现。</p><p><strong>无序、不重复、无索引</strong>。</p><ol><li>创建一个默认长度16的数组，默认加载因子为0.75，数组名table</li><li>元素哈希值%数组的长度，计算出存入位置</li><li>存入位置如果是null直接存入，如果不为null则调用equals方法比较：不相等则存入数组，相等就不用存了</li><li>哈希值相同：JDK8之前，新元素存入数组，老元素移到下面；JDK8之后，新元素直接挂在老元素下面</li><li>数组快满时（占用率接近加载因子）则进行扩容；JDK8开始，当链表长度超过8，且数组长度&gt;&#x3D;64时，自动将链表转成红黑树</li></ol><p>HashSet()默认不能对<strong>内容一样</strong>的两个不同对象去重复。</p><p>此时需要重写对象的<code>hashCode()</code>和<code>equals()</code>方法。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet()"></a>LinkedHashSet()</h3><p><strong>有序、不重复、无索引</strong>。</p><p>相较于<code>HashSet()</code>增加了<strong>双链表</strong>机制记录前后元素的顺序。</p><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet()"></a>TreeSet()</h3><p><strong>默认升序（基于红黑树实现）、不重复、无索引</strong>。</p><p>存储自定义对象时，需要指定比较规则<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Java笔记：常用语法基础@Arrays.sort](空链接)">[1]</span></a></sup>：</p><ul><li>自定义类实现<code>Comparable</code>接口，重写<code>compareTo</code>方法</li><li>通过<code>TreeSet()</code>有参构造器，传入<code>Comparator</code>比较器对象（优先级较高）</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Double.compare()：快速比较两个浮点数</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o2<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map&lt;E&gt;"></a>Map&lt;E&gt;</h2><p>Map集合的每个元素称为一个键值对&#x2F;Entry对象。</p><p>Map集合中的<strong>键不可以重复</strong>。</p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 多态</span>m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"KFC"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加元素</span>m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"KFC"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"KFC"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改某个键值对</span>m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"KFC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据key获取对应value</span>m<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"KFC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据key删除对应键值对，返回原数据</span>m<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"KFC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否包含某个key</span>m<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否包含某个value</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取所有key，使用Set因为key无序不重复</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> values <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取所有value，使用Collection因为value可以重复</span>m1<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将m2集合中的数据全部添加至m1集合，注意key不能重复</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="遍历方式-1"><a href="#遍历方式-1" class="headerlink" title="遍历方式"></a>遍历方式</h3><h4 id="获取所有key"><a href="#获取所有key" class="headerlink" title="获取所有key"></a>获取所有key</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span>，<span class="token class-name">Double</span><span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取包含全部key的Set</span><span class="token keyword">for</span><span class="token punctuation">(</span>string key <span class="token operator">:</span> keys<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 使用for循环遍历，通过get方法取值</span>    <span class="token keyword">double</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"===>"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="键值对遍历"><a href="#键值对遍历" class="headerlink" title="键值对遍历"></a>键值对遍历</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span><span class="token class-name">String</span>，<span class="token class-name">Double</span><span class="token operator">>></span> entries <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取键值对Entry对象的集合</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"===>"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="Lambda表达式-1"><a href="#Lambda表达式-1" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">"===>"</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap()"></a>HashMap()</h3><p>与<a href="#HashSet()">HashSet()</a>实现原理相同（数组、链表、红黑树）。</p><p><code>HashSet()</code>实际上就是基于<code>HashMap()</code>实现的，只是只要key数据，不要value数据而已。</p><p><code>HashMap()</code>依赖<code>hashCode()</code>和<code>equals()</code>方法保证key的唯一。</p><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap()"></a>LinkedHashMap()</h3><p>与<a href="#LinkedHashSet()">LinkedHashSet()</a>实现原理相同（哈希表、双链表）。</p><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap()"></a>TreeMap()</h3><p>与<a href="#TreeSet()">TreeSet()</a>实现原理相同（红黑树）。</p><p>存储自定义对象时需要指定排序规则。</p><h3 id="集合嵌套"><a href="#集合嵌套" class="headerlink" title="集合嵌套"></a>集合嵌套</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span>，<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> cities1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cities1<span class="token punctuation">,</span> <span class="token string">"南京市"</span><span class="token punctuation">,</span> <span class="token string">"扬州市"</span><span class="token punctuation">,</span> <span class="token string">"苏州市"</span><span class="token punctuation">,</span> <span class="token string">"无锡市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"江苏省"</span><span class="token punctuation">,</span> cities1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将String-ArrayList键值对放入Map中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><h3 id="获取Stream流"><a href="#获取Stream流" class="headerlink" title="获取Stream流"></a>获取Stream流</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// List和Set</span>names<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// stream方法由Collection提供</span><span class="token comment">// Map</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ks <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> vs <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取所有键值对</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">></span></span> kvs <span class="token operator">=</span> entries<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取键值对的Stream流</span><span class="token comment">// 数组</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="处理Stream流"><a href="#处理Stream流" class="headerlink" title="处理Stream流"></a>处理Stream流</h3><ul><li><code>filter(Predicate&lt;? super T&gt; predicate)</code>：对流中数据进行过滤</li><li><code>sorted(Comparator&lt;? super T&gt; comparator)</code>：升序排序</li><li><code>limit(long maxSize)</code>：获取前几个元素</li><li><code>skip(long n)</code>：跳过前几个元素</li><li><code>distinct()</code>：去除重复元素，对象去重需要重写equals和hashCode方法</li><li><code>map</code>：加工流中的数据</li><li><code>concat(Stream a, Stream b)</code>：合并a、b两个流</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 找出成绩大于等于60分的数据，升序排序后输出</span>scores<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 找出年龄大于等于23，且年龄小于等于30岁的学生，并按照年龄降序输出</span><span class="token comment">// 这里重写了sort的排序方法</span>students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">23</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1，o2<span class="token punctuation">)</span> <span class="token operator">-></span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 取出身高最高的前3名学生，并输出</span>students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，o1<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 取出身高倒数的2名学生，此处省略了sort</span><span class="token comment">// 跳过前n-2人</span>students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 找出身高超过168的学生叫什么名字，要求去重</span><span class="token comment">// 使用map方法提取name属性</span>students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">168</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">printin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="结束Stream流"><a href="#结束Stream流" class="headerlink" title="结束Stream流"></a>结束Stream流</h3><ul><li><code>forEach</code>：遍历元素</li><li><code>count()</code>：获取元素个数</li><li><code>max</code>、<code>min</code>：最大最小值，可使用<code>get()</code>获取对应元素</li></ul><p>Stream流操作之后通常要转换回数组或集合，但流<strong>只能收集一次</strong>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 将处理过后的数据放在新集合中返回</span><span class="token comment">// Collectors.tolist()、Collectors.toSet()</span><span class="token comment">// 注意Set会去重</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students1 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-></span> a<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">170</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">tolist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 指定键值对</span><span class="token comment">// 需要自己去重</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-></span> a<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">170</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>a <span class="token operator">-></span> a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a <span class="token operator">-></span> a<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出到数组</span><span class="token comment">// toArray()</span>object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-></span> a<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">170</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-></span> a<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">170</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>len <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 收集到Student数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><section class="footnotes"><h2 id="注释">注释</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="%E7%A9%BA%E9%93%BE%E6%8E%A5">Java笔记：常用语法基础@Arrays.sort</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Office小技巧集锦</title>
    <link href="/2023/10/Office%E5%B0%8F%E6%8A%80%E5%B7%A7%E9%9B%86%E9%94%A6/"/>
    <url>/2023/10/Office%E5%B0%8F%E6%8A%80%E5%B7%A7%E9%9B%86%E9%94%A6/</url>
    
    <content type="html"><![CDATA[<p>内容未经排序，使用<code>Ctrl+F</code>进行搜寻。</p><p>不定期更新。</p><span id="more"></span><h2 id="Powerpoint"><a href="#Powerpoint" class="headerlink" title="Powerpoint"></a>Powerpoint</h2><ol><li>令文本框大小匹配里面的文本内容：<ul><li>设置形状格式 - 文本选项 - 文本框 - 根据文字调整形状大小</li></ul></li></ol><h2 id="Word"><a href="#Word" class="headerlink" title="Word"></a>Word</h2><h2 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h2><ol><li>将excel表格中的网址全部设置成超链接：<ul><li>使用<code>=HYPERLINK()</code>公式下拉填充</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>教程与记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java笔记：常用语法基础</title>
    <link href="/2023/10/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/10/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>本文为课程<a href="https://www.bilibili.com/video/BV1Cv411372m">BV1Cv411372m</a>的笔记，内容浅显，仅供参考。</p><span id="more"></span><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="静态初始化数组"><a href="#静态初始化数组" class="headerlink" title="静态初始化数组"></a>静态初始化数组</h3><p>定义数组时直接赋值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 完整格式</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 简化格式</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="动态初始化数组"><a href="#动态初始化数组" class="headerlink" title="动态初始化数组"></a>动态初始化数组</h3><p>定义时不存具体的值，此时所有元素会被赋值为0（或0.0或false或null）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="拷贝数组"><a href="#拷贝数组" class="headerlink" title="拷贝数组"></a>拷贝数组</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 按索引拷贝，不包括截止索引</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyofRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 拷贝并扩容，参数中指定新数组长度</span><span class="token class-name">Arrrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Arrays-setAll"><a href="#Arrays-setAll" class="headerlink" title="Arrays.setAll"></a>Arrays.setAll</h3><p>操作数组中的每个元素。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">99.8</span>，<span class="token number">128</span>，<span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntToDoubleFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">applyAsDouble</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> prices<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Arrays-sort"><a href="#Arrays-sort" class="headerlink" title="Arrays.sort"></a>Arrays.sort</h3><p>默认是升序排序。</p><p>给数组中的对象排序有两种解决方法：</p><ul><li>让该对象的类实现<code>Comparable</code>接口，然后重写<code>compareTo</code>方法</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token comment">// 比较：this和o</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Student</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 左边对象 大于 右边对象，返回正整数</span>    <span class="token comment">// 左边对象 小于 右边对象，返回负整数</span>    <span class="token comment">// 相等返回0</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> o<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">// 升序</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>使用<code>sort</code>方法中的第二个参数，创建<code>Comparator</code>接口的匿名内部类对象</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>student o1<span class="token punctuation">,</span> <span class="token class-name">Student</span> o2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 左边对象o1，右边对象o2</span>    <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 升序</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>注意</strong>：比较时只能返回<code>int</code>型。</p><h2 id="Object"><a href="#Object" class="headerlink" title="Object()"></a>Object()</h2><h3 id="Object-toString"><a href="#Object-toString" class="headerlink" title="Object.toString()"></a>Object.toString()</h3><p>以字符串形式返回对象。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 重写toString方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Object-equals-Object-o"><a href="#Object-equals-Object-o" class="headerlink" title="Object.equals(Object o)"></a>Object.equals(Object o)</h3><p>比较两个对象的地址是否相同，可通过重写方法改变用途。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 重写equals方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 被比较者为o</span>    <span class="token comment">// 比较者（主调）为this</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Object-clone"><a href="#Object-clone" class="headerlink" title="Object.clone()"></a>Object.clone()</h3><p><code>clone()</code>是<code>protected</code>方法，只有在<code>Object</code>的子类中才可以访问。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 重写clone方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用父类的clone方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>被克隆的类需要实现<code>Cloneable</code>接口（标记接口）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p><code>clone</code>方法实现的是浅克隆，引用类型只拷贝地址。</p><h3 id="Objects-equals-Object-o"><a href="#Objects-equals-Object-o" class="headerlink" title="Objects.equals(Object o)"></a>Objects.equals(Object o)</h3><p>比较两个对象的地址是否相同，防止比较时<strong>主调对象为null</strong>。</p><p>Objects为常用工具类，提供关于对象的静态方法。</p><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>将基本数据类型包装为对象。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 生成包装类</span><span class="token class-name">Integer</span> a1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">// 自动装箱</span><span class="token keyword">int</span> a2 <span class="token operator">=</span> a1<span class="token punctuation">;</span><span class="token comment">// 自动拆箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>泛型和集合不支持基本数据类型，这时可以使用包装类。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArratList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自动装箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>包装类也提供了一些方法：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"12"</span><span class="token punctuation">;</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 推荐</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="String"><a href="#String" class="headerlink" title="String()"></a>String()</h2><h3 id="创建String对象"><a href="#创建String对象" class="headerlink" title="创建String对象"></a>创建String对象</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name1 <span class="token operator">=</span> <span class="token string">"大大大"</span><span class="token punctuation">;</span><span class="token class-name">String</span> name2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"大大大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> chars <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"大"</span><span class="token punctuation">,</span> <span class="token string">"大"</span><span class="token punctuation">,</span> <span class="token string">"大"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span> name3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="String方法"><a href="#String方法" class="headerlink" title="String方法"></a>String方法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"ABCD"</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 长度</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回索引位置的字符</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 转换为字符数组</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 比较内容</span>s<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 忽略大小写比较内容</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 截取，开始索引-结束索引，不包括结束索引</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 结束索引不填则截取到最后</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"G"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 替换</span>s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 包含某个关键字</span>s<span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 以某个字符开始</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 分割字符串，返回分割后的数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="String不可变"><a href="#String不可变" class="headerlink" title="String不可变"></a>String不可变</h3><p>String对象是不可变的，相同内容的字符串只会在内存中存储一份（<strong>堆内存的字符串常量池</strong>）。</p><p>但通过new方式创建的字符串，则会在内存中生成新的对象。</p><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder()"></a>StringBuilder()</h3><p>生成一个可变的字符序列，适合对字符串进行频繁的拼接和修改。</p><p>不适合多线程使用。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 反转字符串</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 转换为String类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>多线程可使用线程安全的<code>StringBuffer</code>，使用方法类似。</p><h3 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner()"></a>StringJoiner()</h3><p>用于快速拼接字符串。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringJoiner</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"["</span><span class="token punctuation">,</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时字符串为[111,222,333]</span>s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 转换为String类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><h3 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate()"></a>LocalDate()</h3><p>年、月、日、星期。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> ld <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> year <span class="token operator">=</span> ld<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 年</span><span class="token keyword">int</span> month <span class="token operator">=</span> ld<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 月（1-12）</span><span class="token keyword">int</span> day <span class="token operator">=</span> ld<span class="token punctuation">.</span><span class="token function">getDayofMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 日</span><span class="token keyword">int</span> dayofYear <span class="token operator">=</span> ld<span class="token punctuation">.</span><span class="token function">getDayofYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一年中的第几天</span><span class="token keyword">int</span> dayofWeek <span class="token operator">=</span> ld<span class="token punctuation">.</span><span class="token function">getDayofWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 星期几</span><span class="token comment">// 修改: withYedr、withMonth、withDay0fMonth、withDay0fYear</span><span class="token comment">// LocalDate为不可变对象，不会修改原对象的值</span><span class="token class-name">LocalDate</span> ld2 <span class="token operator">=</span> ld<span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">2099</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 增加: plusYears、pLusMonths、plusDays、plusWeeks</span><span class="token comment">// 减少: minusYears、minusMonths、minusDays、minusWeeks</span><span class="token comment">// 获取指定日期的LocalDate对象：(int year, int month, int day0fMonth)</span><span class="token class-name">LocalDate</span> ld3 <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2099</span>，<span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 比较两个对象：equals、isBefore、isAfter</span>ld2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ld3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可通过<code>Period()</code>比较相差的日期。</p><h3 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime()"></a>LocalTime()</h3><p>时、分、秒、纳秒。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalTime</span> lt <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> hour <span class="token operator">=</span> lt<span class="token punctuation">.</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 时</span><span class="token keyword">int</span> minute <span class="token operator">=</span> lt<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 分</span><span class="token keyword">int</span> second <span class="token operator">=</span> lt<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 秒</span><span class="token keyword">int</span> nano <span class="token operator">=</span> lt<span class="token punctuation">.</span><span class="token function">getNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 纳秒</span><span class="token comment">// 修改：withHour、withMinute、withSecond、withNano</span><span class="token comment">// 增加：plusHours、pLusMinutes、plusSeconds、pLusNanos</span><span class="token comment">// 减少：minusHours、minusMinutes、minusSeconds、minusNanos</span><span class="token comment">// 获取指定时间的LocalTime对象：(int hour, int minute, int second)</span><span class="token class-name">LocalTime</span> lt1 <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 比较两个对象：equals、isBefore、isAfter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可通过<code>Duration()</code>比较相差的时间。</p><h3 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime()"></a>LocalDateTime()</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDateTime</span> ldt <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取指定日期和时间的LocalDateTime对象：(int year, Month month, int dayofMonth, int hour, int minute, int second, int nano0fSecond)</span><span class="token comment">// 互相转换</span><span class="token class-name">LocalDate</span> ld <span class="token operator">=</span> ldt<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalTime</span> lt <span class="token operator">=</span> ldt<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDateTime</span> ldt1 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>ld<span class="token punctuation">,</span>lt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Instant"><a href="#Instant" class="headerlink" title="Instant()"></a>Instant()</h3><p>获取某个时刻的时间戳。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Instant</span> now <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> second <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 总秒数</span><span class="token keyword">int</span> nano <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不够1秒的纳秒数</span><span class="token comment">// 增加减少：plusNanos、minusNanos</span><span class="token comment">// 比较两个对象：equals、isBefore、isAfter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter()"></a>DateTimeFormatter()</h3><p>格式化时间。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> rs1 <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 正向格式化</span><span class="token class-name">String</span> rs2 <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 反向格式化</span><span class="token comment">// 解析时间</span><span class="token class-name">String</span> dateStr <span class="token operator">=</span> <span class="token string">"2029年12月12日 12:12:11"</span><span class="token punctuation">;</span><span class="token class-name">LocalDateTime</span> ldt <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr，formatter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h2><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner()"></a>Scanner()</h3><p>接收用户输入。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等待用户输入整数</span><span class="token class-name">String</span> name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等待用户输入字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Random"><a href="#Random" class="headerlink" title="Random()"></a>Random()</h3><p>生成随机数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> number <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取0-9的随机整数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="System-currentTimeMillis"><a href="#System-currentTimeMillis" class="headerlink" title="System.currentTimeMillis()"></a>System.currentTimeMillis()</h3><p>返回long类型的时间毫秒值（时间戳），可用来计算程序运行时间。</p><h3 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal()"></a>BigDecimal()</h3><p>解决浮点数运算失真的问题。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigDecimal</span> a <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// add, subtract, multiply, divide</span>c<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 转换为double类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>用于简化函数式接口的匿名内部类的写法。</p><p><strong>函数式接口</strong>：接口中有且仅有一个抽象方法，一般使用<code>@FunctionalInterface</code>修饰。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Swimming</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Swimming</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"in a lake"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="简化规则"><a href="#简化规则" class="headerlink" title="简化规则"></a>简化规则</h3><ul><li><p>参数类型可以省略</p></li><li><p>若只有一个参数，括号可省略</p></li><li><p>若只有一行代码，大括号可省略，此时语句的分号要去掉，若是return语句，则return也要去掉</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 简化前</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntToDoubleFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">applyAsDouble</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> prices<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 简化后</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span> value <span class="token operator">-></span> prices<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="方法引用-1"><a href="#方法引用-1" class="headerlink" title="方法引用[1]"></a>方法引用<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[秒懂Java之方法引用（method reference）详解](https://blog.csdn.net/ShuSheng0007/article/details/107562812)">[1]</span></a></sup></h2><h3 id="静态方法引用"><a href="#静态方法引用" class="headerlink" title="静态方法引用"></a>静态方法引用</h3><p>Lambda表达式只调用一个静态方法，且匿名内部类传入的参数与静态方法的参数相同。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// lambda</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token comment">// method reference</span><span class="token class-name">Class</span><span class="token operator">::</span><span class="token function">staticMethod</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 匿名内部类形式</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">TestUtil</span><span class="token punctuation">.</span><span class="token function">isBiggerThan</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// lambda表达式形式</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> p2 <span class="token operator">=</span> integer <span class="token operator">-></span> <span class="token class-name">TestUtil</span><span class="token punctuation">.</span><span class="token function">isBiggerThan</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// MethodReference形式</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> p3 <span class="token operator">=</span> <span class="token class-name">TestUtil</span><span class="token operator">::</span><span class="token function">isBiggerThan</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="实例方法引用"><a href="#实例方法引用" class="headerlink" title="实例方法引用"></a>实例方法引用</h3><p>Lambda表达式只调用一个实例方法，且匿名内部类传入的参数与实例方法的参数相同。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// lambda</span><span class="token comment">// 实例对象作为参数传入</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-></span> obj<span class="token punctuation">.</span><span class="token function">instanceMethod</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token comment">// method reference</span><span class="token class-name">ObjectType</span><span class="token operator">::</span><span class="token function">instanceMethod</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 匿名内部类形式</span><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> student<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用student对象的实例方法，student对象作为参数传入</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// lambda表达式形式</span><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> f2 <span class="token operator">=</span> <span class="token punctuation">(</span>student<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token operator">-></span> student<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// MethodReference形式</span><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> f3 <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="方法主调作为第一个参数"><a href="#方法主调作为第一个参数" class="headerlink" title="方法主调作为第一个参数"></a>方法主调作为第一个参数</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 简化前</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names，<span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> o1<span class="token punctuation">,</span> <span class="token class-name">String</span> o2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareToIgnoreCase</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 简化后</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">compareToIgnoreCase</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><p>Lambda表达式只创建对象。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// lambda</span><span class="token comment">// 实例对象作为参数传入</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">ClassName</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token comment">// method reference</span><span class="token class-name">ClassName</span><span class="token operator">::</span><span class="token keyword">new</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 匿名内部类形式</span><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">></span></span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// lambda表达式形式</span><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">></span></span> s2 <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// MethodReference形式</span><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">></span></span> s3 <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>通常使用<code>Exception</code>及其子类来反应程序的异常。</p><ul><li>运行时异常：<code>RuntimeException</code>及其子类，编译阶段不会出现错误提醒</li><li>编译时异常：编译阶段就会出现错误提醒</li></ul><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AgeIllegalRuntimeException</span><span class="token punctuation">(</span>"<span class="token operator">/</span>age is illegal<span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">&#123;</span>    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:/123.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 监视可能出现异常的代码</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 变量<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 处理异常...</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// Exception可以捕获一切异常</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 运行时异常继承RuntimeException</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgeIllegalRuntimeException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">AgeIllegalRuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AgeIllegalRuntimeException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><section class="footnotes"><h2 id="注释">注释</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/ShuSheng0007/article/details/107562812">秒懂Java之方法引用（method reference）详解</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java笔记：面向对象基础</title>
    <link href="/2023/10/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/10/Java%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>本文为课程<a href="https://www.bilibili.com/video/BV1Cv411372m">BV1Cv411372m</a>的笔记，内容浅显，仅供参考。</p><span id="more"></span><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">double</span> score<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>创建学生对象并使用：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"AAA"</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><code>this</code>可在方法中拿到当前对象，下述方法执行后会输出对象的地址。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>this</code>可用来解决<strong>变量名称冲突</strong>的问题。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> score<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">PrintPass</span><span class="token punctuation">(</span><span class="token keyword">double</span> score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">></span> score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 同名变量</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">s1<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">s1<span class="token punctuation">.</span></span>PrintPass</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>与类同名的特殊方法。</p><p>对象创建时会调用构造器，可用来给对象赋初始值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 无参数构造器</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 有参数构造器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment">// 赋初始值</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>无参数构造器会自动生成。</p><p>当有参数构造器存在时，<strong>不会自动生成</strong>无参数构造器。</p><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>方法名称相同，但参数的<strong>个数、类型、顺序</strong>不同。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="get和set方法"><a href="#get和set方法" class="headerlink" title="get和set方法"></a>get和set方法</h3><p>将变量设置为<code>private</code>进行保护时，需要向外暴露出get和set方法获取和修改变量的值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span>        <span class="token comment">// 获取变量</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> score<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 修改变量</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScore</span><span class="token punctuation">(</span><span class="token keyword">double</span> score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><ul><li>所有成员变量私有，对外暴露get和set方法</li><li>提供一个<code>public</code>的无参数构造器</li></ul><p>只用来存储数据，可用来实现数据与数据业务处理相分离。</p><h3 id="static修饰符"><a href="#static修饰符" class="headerlink" title="static修饰符"></a>static修饰符</h3><p><strong>修饰变量时：</strong></p><ul><li>有<code>static</code>：类变量，属于<strong>类</strong>所有（被类的全部对象共享），内存中只有一份</li><li>无<code>static</code>：实例变量，属于<strong>实例对象</strong>所有</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 类变量</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token comment">// 实例变量</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>修饰方法时：</strong></p><ul><li>有<code>static</code>：类方法，属于<strong>类</strong>所有，使用<code>类名.类方法</code>访问</li><li>无<code>static</code>：实例方法，属于<strong>实例对象</strong>所有，使用<code>对象.实例方法</code>访问</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 类方法</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 实例方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>main</code>方法实际上就是一个<strong>类方法</strong>。</p><p>使用类方法需要注意：</p><ul><li>类方法中不能访问实例变量</li><li>类方法中不能使用<code>this</code></li></ul><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><p>只提供方法的类，可直接使用其类名调用。</p><p>此时不需要创建对象，调用方便，节省内存。</p><p>建议将工具类的构造器设为私有，防止使用其创建对象。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyUtil</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MyUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 构造器私有</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> printHello<span class="token punctuation">&#123;</span>        <span class="token comment">// 类方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p><strong>静态代码块</strong>在类加载时自动执行。因为类只会加载一次，所以静态代码块也<strong>只会执行一次</strong>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 静态代码块</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>可为类进行复杂的初始化赋值。</p><p><strong>实例代码块</strong>执行在<strong>构造器之前</strong>。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="继承的概念"><a href="#继承的概念" class="headerlink" title="继承的概念"></a>继承的概念</h3><p>子类可继承父类的<strong>非私有（非<code>private</code>）成员</strong>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token comment">//  子类B继承了父类A</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>访问父类<code>private</code>变量时，可使用get和set方法进行操作。</p><h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><p>总体上遵循：<code>public</code>&gt;<code>protected</code>&gt;<code>default</code>&gt;<code>private</code>。</p><table><thead><tr><th></th><th>同一个类</th><th>同一个包</th><th>不同包的子类</th><th>不同包的非子类</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>default</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr></tbody></table><p><strong>注意</strong>：这里的子类指子类里面，不是子类对象。</p><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>子类可以使用<strong>方法名称和参数列表相同</strong>的方法，覆盖父类的对应方法。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 重写toString</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>重写方法的<strong>权限修饰符</strong>需大于等于父类</li><li>重写方法的<strong>返回值</strong>需小于等于父类</li><li><strong>私有方法、静态方法</strong>不能重写</li></ul><h3 id="访问成员变量与方法"><a href="#访问成员变量与方法" class="headerlink" title="访问成员变量与方法"></a>访问成员变量与方法</h3><p>遵循就近原则。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token comment">// 子类成员变量</span><span class="token keyword">super</span><span class="token punctuation">.</span>name<span class="token comment">// 父类成员变量</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 父类方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="子类构造器"><a href="#子类构造器" class="headerlink" title="子类构造器"></a>子类构造器</h3><p>子类构造器会<strong>先调用父类的构造器</strong>，再执行自己。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Z</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// super();默认调用父类无参数构造器</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>若父类没有无参数构造器，则需要手动调用其有参数构造器。</p><p>可用来给对象初始化。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> skill<span class="token punctuation">;</span>        <span class="token comment">// 子类构造器</span>    <span class="token keyword">public</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> skill<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用父类构造器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">=</span> skill<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// name属性在父类中</span>        <span class="token comment">// 父类构造器</span>    <span class="token keyword">public</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="兄弟构造器"><a href="#兄弟构造器" class="headerlink" title="兄弟构造器"></a>兄弟构造器</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用下面的构造器，为age赋默认值</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="多态的概念"><a href="#多态的概念" class="headerlink" title="多态的概念"></a>多态的概念</h3><p>若<code>Teacher</code>和<code>Student</code>都继承了<code>People</code>类，三个类中都实现了<code>run</code>方法。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">People</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Tecaher的run方法</span><span class="token class-name">People</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Student的run方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>多态的前提：</strong></p><ul><li>有继承或实现关系</li><li>存在父类引用子类对象（例如line1和line4）</li><li>存在<strong>方法重写</strong></li></ul><p>多态指对象与行为的多态，与变量无关。</p><p><strong>多态的好处：</strong></p><ul><li>实现右边对象的解耦合</li><li>使用父类类型作为形参，可接收一切子类对象</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token class-name">People</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">go</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Teacher</span><span class="token function">go</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Student</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>多态下不能直接调用子类的独有方法，此时可以使用<strong>强制类型转换</strong>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">People</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> p1<span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>编译阶段有继承或实现关系就可以强制类型转换，但运行时若<strong>强转后的类型与真实类型不同</strong>，就会出现类型转换异常（<code>ClassCastException</code>）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断对象的真实类型</span><span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> p1<span class="token punctuation">;</span>    s1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Teacher</span> t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Teacher</span><span class="token punctuation">)</span> p1<span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><ul><li>修饰类：类不能被继承</li><li>修饰方法：方法不能被重写</li><li>修饰变量：变量只能赋值一次</li></ul><p><code>final</code>修饰变量时要注意：</p><ul><li>修饰基本类型变量，值不能改变</li><li>修饰引用类型变量，地址不能改变，但指向的数据可以改变</li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p><code>static final</code>可用来定义常量，需要在定义时赋值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SCHOOL_NAME</span> <span class="token operator">=</span> <span class="token string">"AAA"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>编译时，常量会被替换为字面量，这样可以保证性能和直接使用字面量是一样的。</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 抽象不能有方法体</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>抽象类不能创建对象，<strong>只能作为父类</strong>。</li><li>抽象类中可以不写抽象方法，但有抽象方法的类一定是抽象类。</li><li>继承抽象类的类必须<strong>重写全部抽象方法</strong>，否则这个类也只能定义为抽象类。</li></ul><p>抽象类可以更好地实现多态，例子如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 抽象方法</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cat says"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog says"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> miao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>miao<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Cat says</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>抽象类可以用来编写<strong>模板方法</strong>，建议使用<code>final</code>关键字进行修饰，<strong>防止子类重写</strong>。</p><p>模板方法设计模式通常包含两个部分：模板方法（模板）、抽象方法（具体实现交给子类完成），使用<strong>抽象类</strong>实现。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Driver</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 定义接口</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">Driver</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 实现接口</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>接口中的变量：常量（<code>public static final</code>）</li><li>接口中的方法：抽象方法（<code>public abstract</code>）</li></ul><p>接口不能创建对象，只能被类实现（<code>implements</code>），称为<strong>实现类</strong>。</p><p>一个类可以实现多个接口，但必须重写完全部接口的全部抽象方法。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Driver</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 面向接口</span>d<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>使用<code>default</code>修饰，默认<code>public</code>，只能由<strong>实现类的对象</strong>来访问。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 默认方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 实现类</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过实现类的对象访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="私有方法（JDK9）"><a href="#私有方法（JDK9）" class="headerlink" title="私有方法（JDK9）"></a>私有方法（JDK9）</h3><p>使用<code>private</code>修饰，可在<strong>接口内的其他方法</strong>调用。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 私有方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>使用<code>static</code>修饰，默认<code>public</code>，使用<strong>接口名称</strong>调用。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 静态方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过接口名称调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h3><ul><li>继承或实现多个接口，不可以存在相同名称的方法</li><li>一个类继承了父类，又实现了接口，若存在相同名称方法，<strong>优先使用父类的</strong></li><li>实现多个接口，存在同名的默认方法时，在类中重写该方法即可</li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 成员内部类</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// JDK16支持静态成员</span>        <span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">// 访问外部类对象</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 先创建外部类对象</span><span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 静态内部类</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// JDK16支持静态成员</span>        <span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">// 访问外部类对象</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 静态类可以直接访问</span><span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>不能直接访问外部类的实例成员。</p><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>定义在方法、代码块、构造体等执行体中的类。</p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类实际上是一个子类，并会立即创建一个子类对象。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> 类或接口<span class="token punctuation">(</span>参数值<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    类体：一般是方法重写<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建匿名内部类</span><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cat says"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>a<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>匿名内部类可以作为参数传递给对象。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Swimming</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// go方法接收一个类型为Swimming的对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token class-name">Swimming</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用匿名内部类作为参数</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Swimming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cat swims"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="枚举的概念"><a href="#枚举的概念" class="headerlink" title="枚举的概念"></a>枚举的概念</h3><p>枚举<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Java中的枚举，这一篇全了](https://zhuanlan.zhihu.com/p/356623321)">[1]</span></a></sup>是一个特殊的类，每一个枚举项本质上都是<strong>枚举类自身的实例</strong>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span><span class="token punctuation">&#123;</span>    <span class="token constant">RED</span><span class="token punctuation">,</span> <span class="token constant">GREEN</span><span class="token punctuation">,</span> <span class="token constant">BLUE</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Color</span> c1 <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>枚举类的构造器私有（<code>private</code>），不能创建对象。枚举类是最终（<code>final</code>）类，不能被继承。</p><p>所有枚举值都是常量（<code>public static final</code> ）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Color</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Color</span> <span class="token constant">RED</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Color</span> <span class="token constant">BLUE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Color</span> <span class="token constant">GREEN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以使用枚举实现单例模式。</p><h3 id="枚举类的方法"><a href="#枚举类的方法" class="headerlink" title="枚举类的方法"></a>枚举类的方法</h3><ul><li><code>values()</code>：返回枚举类全部常量。</li><li><code>ordinal()</code>：返回枚举常量的索引。</li><li><code>valueOf()</code>：通过字符串的值，返回对应枚举常量。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Color</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"RED"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回RED对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="抽象枚举"><a href="#抽象枚举" class="headerlink" title="抽象枚举"></a>抽象枚举</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token class-name">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 若调用有参构造器，需要在X后括号内传入参数</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 重写抽象方法</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 重写抽象方法</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 抽象类</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="枚举的应用"><a href="#枚举的应用" class="headerlink" title="枚举的应用"></a>枚举的应用</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Constant</span><span class="token punctuation">&#123;</span>    <span class="token constant">BOY</span><span class="token punctuation">,</span> <span class="token constant">GIRL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">Constant</span> sex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// case不需要带前缀（如Constant.BOY）</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token constant">BOY</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">GIRL</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型的概念"><a href="#泛型的概念" class="headerlink" title="泛型的概念"></a>泛型的概念</h3><p>定义类、接口、方法时，同时声明了一个或多个类型变量（如<code>&lt;E&gt;</code>）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 只能添加String类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>这样可以避免强制类型转换。</p><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 传入E类型</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 返回E类型</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以定义多个类型，如<code>MyClass&lt;E, T&gt;</code>，<code>add(E e, T t)</code>。</p><p>也可以对继承进行约束，如<code>MyClass&lt;E extends Animal&gt;</code>。</p><p><strong>泛型擦除</strong>：Java在编译期间，所有的泛型信息都会被擦掉。</p><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Data</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherData</span> <span class="token keyword">implements</span> <span class="token class-name">Data</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Teacher</span> teacher<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">></span></span> <span class="token function">getByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>泛型可以使用通配符：</p><ul><li><code>?</code>：任意类型</li><li><code>? extends Car</code>：<code>Car</code>及其子类</li><li><code>? super Car</code>：<code>Car</code>及其父类</li></ul><section class="footnotes"><h2 id="注释">注释</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/356623321">Java中的枚举，这一篇全了</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>个人使用的Window软件记录</title>
    <link href="/2023/09/%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E7%9A%84Window%E8%BD%AF%E4%BB%B6%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/09/%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E7%9A%84Window%E8%BD%AF%E4%BB%B6%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>文章内容均为外部链接，请注意分辨。</p><p>不定期更新。</p><span id="more"></span><h2 id="必备"><a href="#必备" class="headerlink" title="必备"></a>必备</h2><ul><li><a href="https://www.mozilla.org/zh-CN/firefox/all/#product-desktop-release">Mozilla Firefox</a>：国际版</li><li><a href="https://www.google.com/chrome/">Google Chrome</a></li><li><a href="https://www.huorong.cn/person5.html">火绒安全</a></li><li><a href="https://www.jianguoyun.com/s/downloads">坚果云</a></li><li><a href="https://www.bandisoft.com/bandizip/old/6/">Bandizip</a>：无广告旧版本6.29</li><li><a href="https://cn.bandisoft.com/honeyview/">Honeyview</a>：一款图片查看软件</li><li><a href="https://www.videohelp.com/software?d=PotPlayerSetup64-1.7.18958.exe">Potplayer</a>：无广告旧版本1.7.18958</li></ul><h2 id="编程工具"><a href="#编程工具" class="headerlink" title="编程工具"></a>编程工具</h2><ul><li><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">Clash for Windows</a></li><li><a href="https://code.visualstudio.com/">Visual Studio Code</a></li><li><a href="https://typora.io/#download">Typora</a></li><li><a href="https://nodejs.org/en">Node.js</a></li><li><a href="https://docs.conda.io/projects/miniconda/en/latest/">Miniconda</a></li><li><a href="https://www.oracle.com/cn/java/technologies/downloads/">Java Downloads</a></li></ul><h2 id="免安装工具"><a href="#免安装工具" class="headerlink" title="免安装工具"></a>免安装工具</h2><ul><li><a href="https://github.com/BluePointLilac/ContextMenuManager/releases">Context Menu Manager</a>：右键菜单管理工具</li><li><a href="https://www.52pojie.cn/thread-1224420-1-1.html">Duplicate Cleaner Pro</a>：重复文件查找工具，吾爱破解提供的版本</li><li><a href="https://github.com/huanghongxun/HMCL/releases">HMCL</a>：Minecraft Java版第三方启动器</li><li><a href="https://github.com/localsend/localsend">LocalSend</a>：局域网文件传输工具</li><li><a href="https://otp.landian.vip/zh-cn/">Office Tool</a></li><li><a href="https://zh.snipaste.com/">Snipaste</a></li><li><a href="http://www.tbtool.cn/">图吧工具箱</a></li></ul><h2 id="国内服务"><a href="#国内服务" class="headerlink" title="国内服务"></a>国内服务</h2><ul><li><a href="https://im.qq.com/pcqq/index.shtml">QQ</a>：QQNT</li><li><a href="https://pc.weixin.qq.com/">微信</a></li><li><a href="https://uu.163.com/">网易UU</a></li></ul><h2 id="设计工具"><a href="#设计工具" class="headerlink" title="设计工具"></a>设计工具</h2><ul><li>Adobe Acrobat DC</li><li>Adobe Indesign</li><li>Adobe Lightroom Classic</li><li>Adobe Photoshop</li><li>Adobe Premiere Pro</li><li><a href="https://avidemux.sourceforge.net/">Avidemux</a>：一款快速剪辑视频的软件</li></ul><h2 id="未分类"><a href="#未分类" class="headerlink" title="未分类"></a>未分类</h2><ul><li><a href="https://115.com/">115网盘</a></li><li><a href="https://github.com/chenjing1294/GifCapture/releases">Gif Capture</a>：一款录制gif的软件</li><li><a href="https://www.52pojie.cn/thread-1290173-1-1.html">High-Logic Font Creator</a>：V13汉化版，可用来查看字体的英文名称</li><li><a href="https://listen1.github.io/listen1/">Listen1</a>：一款音乐软件</li><li><a href="https://www.logitechg.com/zh-cn/innovation/g-hub.html">Logitech G Hub</a></li><li><a href="https://store.steampowered.com/about/">Steam</a></li><li><a href="https://www.houyicaiji.com/">后羿采集器</a></li></ul><h2 id="Firefox扩展"><a href="#Firefox扩展" class="headerlink" title="Firefox扩展"></a>Firefox扩展</h2><ul><li><a href="https://addons.mozilla.org/zh-CN/firefox/addon/auto-refresh-page/">Auto Refresh Page</a></li><li><a href="https://addons.mozilla.org/zh-CN/firefox/addon/clear-browsing-data/">Clear Browsing Data</a></li><li><a href="https://addons.mozilla.org/zh-CN/firefox/addon/epubreader">EPUB Reader</a></li><li><a href="https://addons.mozilla.org/zh-CN/firefox/addon/firefox-color/">Firefox Color</a></li><li><a href="https://addons.mozilla.org/zh-CN/firefox/addon/single-file">SingleFile</a></li><li><a href="https://addons.mozilla.org/zh-CN/firefox/addon/tampermonkey/">Tampermonkey</a></li><li><a href="https://addons.mozilla.org/zh-CN/firefox/addon/traduzir-paginas-web/">Translate Web Pages</a></li><li><a href="https://github.com/gorhill/uBlock/releases">uBlock</a></li><li><a href="https://addons.mozilla.org/zh-CN/firefox/addon/url-to-qrcode/">URL to QR code</a></li><li><a href="https://addons.mozilla.org/zh-CN/firefox/addon/video-downloadhelper/">Video DownloadHelper</a></li><li>Z-Library Finder</li></ul><h2 id="Tampermonkey脚本"><a href="#Tampermonkey脚本" class="headerlink" title="Tampermonkey脚本"></a>Tampermonkey脚本</h2><ul><li><a href="https://greasyfork.org/zh-CN/scripts/378351">CSDN Greener</a></li><li><a href="https://greasyfork.org/zh-CN/scripts/423001">Twitter Media Downloader</a></li><li><a href="https://greasyfork.org/zh-CN/scripts/436446">网盘直链下载助手</a></li></ul><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>所有字体均标注支持<code>Font Famliy</code>的标准格式。</p><p><strong>主力字体：</strong></p><ul><li><a href="https://fonts.google.com/specimen/Roboto+Mono">Roboto Mono</a>：Roboto Mono</li><li><a href="https://github.com/adobe-fonts/source-han-sans">思源黑体</a>：Source Han Sans SC</li><li><a href="https://developer.harmonyos.com/cn/design/resource">鸿蒙黑体</a>：HarmonyOS Sans SC</li></ul><p><strong>简体中文字体：</strong></p><ul><li><a href="https://github.com/adobe-fonts/source-han-serif">思源宋体</a>：Source Han Serif SC</li><li>苹方：PingFang SC</li></ul>]]></content>
    
    
    <categories>
      
      <category>列表</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MIUI搞机笔记</title>
    <link href="/2023/09/MIUI%E6%90%9E%E6%9C%BA%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/09/MIUI%E6%90%9E%E6%9C%BA%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>目前小米已经推出了全新的HyperOS，本文的部分内容需要在之后进行重写。</p><span id="more"></span><p>以下是原内容。</p><p>从Android2.3一直折腾到Android13，各种新的搞机技术层出不穷。希望能通过在这里记录下一些关键内容，为之后可能的刷机之旅提供帮助。</p><p>修改于2023-07-12发布的同名文章。</p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><h3 id="QQ-微信-Tim"><a href="#QQ-微信-Tim" class="headerlink" title="QQ 微信 Tim"></a>QQ 微信 Tim</h3><p>这三个老大难App以巨大的数据量、混乱的存储路径、反人类的备份方式成为了备份数据中最困难的环节。</p><ul><li>小米换机App：小米、vivo、oppo可以直接互传第三方应用数据。</li><li>Swift Backup：需要root权限。</li><li>App内置的备份方式：出现断连等问题的概率不确定。</li></ul><p>建议使用多种方式进行备份，以防万一。</p><p>并且，这三个大聪明除了在根目录肆无忌惮之外，还会在<code>Android/data</code>目录里面存储重要文件，所以备份的时候不要忘记。</p><p>题外话：上一段所述的行为在日常使用中也会造成许多不便，可以使用<a href="https://github.com/RikkaApps/SaveCopy">SaveCopy</a>解决。它可以方便地生成一份文件的副本在Download目录中，无需艰难地访问Android&#x2F;data。</p><p>需要注意：<strong>所有的备份方式都有可能丢失小部分数据</strong>，这无法确定也无法避免。所以极为重要的数据、图片、视频、文件和聊天记录都需要单独进行备份。</p><h3 id="普通App"><a href="#普通App" class="headerlink" title="普通App"></a>普通App</h3><p>直接使用Swift Backup或数据备份<code>com.xayah.databackup</code>即可。</p><p>淘宝、支付宝、银行等App个人觉得不需要备份，直接应用商店下载就好。</p><h3 id="联系人-短信-通话记录"><a href="#联系人-短信-通话记录" class="headerlink" title="联系人 短信 通话记录"></a>联系人 短信 通话记录</h3><p>使用厂商自带的云服务即可，没有云服务的用第三方备份App也OK。</p><h3 id="桌面布局"><a href="#桌面布局" class="headerlink" title="桌面布局"></a>桌面布局</h3><p>虽然部分服务可以备份桌面布局，但还是推荐截图备份以便后续恢复。</p><h3 id="卡包"><a href="#卡包" class="headerlink" title="卡包"></a>卡包</h3><p>记得移除已经开通的公交卡，以及备份复制的门卡。</p><h3 id="magisk-LSPosed"><a href="#magisk-LSPosed" class="headerlink" title="magisk LSPosed"></a>magisk LSPosed</h3><p>模块列表可以通过长截图保存。</p><h3 id="cookie-激活码"><a href="#cookie-激活码" class="headerlink" title="cookie 激活码"></a>cookie 激活码</h3><p>一些App有部分特殊数据需要特别注意。例如：</p><ul><li>ehviewer的cookie：便于快速登录</li><li>Thanox、冰箱、存储空间隔离等App的激活码</li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="MIUI"><a href="#MIUI" class="headerlink" title="MIUI"></a>MIUI</h3><p>寻找刷机包时，请确定好<strong>机型</strong>、<strong>版本</strong>（稳定版&#x2F;开发版）、<strong>类别</strong>（国际版&#x2F;欧洲版&#x2F;印度版&#x2F;电信定制版等），以免发生错误。</p><p>推荐在<a href="https://xiaomirom.com/">xiaomirom</a>进行下载。</p><h3 id="小米刷机工具"><a href="#小米刷机工具" class="headerlink" title="小米刷机工具"></a>小米刷机工具</h3><ul><li><a href="https://miflashpro.com/">MI FLASH PRO</a></li><li>小米手机助手</li></ul><h3 id="解锁工具"><a href="#解锁工具" class="headerlink" title="解锁工具"></a>解锁工具</h3><ul><li><a href="https://www.miui.com/unlock/index.html">解锁小米手机</a></li></ul><h3 id="搞机工具"><a href="#搞机工具" class="headerlink" title="搞机工具"></a>搞机工具</h3><ul><li><a href="https://github.com/HuskyDG/magisk-files">magisk delta</a></li><li><a href="https://github.com/CoderTyn/Magisk-Alpha">magisk alpha</a></li><li><a href="https://github.com/LSPosed/LSPosed">LSPosed</a></li><li><a href="https://github.com/Kr328/ClashForAndroid">Clash for Android</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程与记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C语言笔记：求方程的根</title>
    <link href="/2023/09/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B1%82%E6%96%B9%E7%A8%8B%E7%9A%84%E6%A0%B9/"/>
    <url>/2023/09/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B1%82%E6%96%B9%E7%A8%8B%E7%9A%84%E6%A0%B9/</url>
    
    <content type="html"><![CDATA[<p>使用二分法、牛顿迭代法、截弦法求方程的根。</p><span id="more"></span><p>原文发布于2023-03-05。</p><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token comment">// 待求方程</span><span class="token keyword">double</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> low <span class="token operator">=</span> <span class="token number">1.4</span><span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token number">3.33</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 快乐二分</span>    <span class="token comment">// 条件别写反了</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1e-5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>low<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            high <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            low <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Mid: %f\n"</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Ans: %f\n"</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="牛顿迭代法"><a href="#牛顿迭代法" class="headerlink" title="牛顿迭代法"></a>牛顿迭代法</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token comment">// 待求方程</span><span class="token keyword">double</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 待求方程的一阶导</span><span class="token keyword">double</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">6</span> <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> x<span class="token punctuation">,</span> x0<span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token number">1.8</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">&#123;</span>        x0 <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">// 保存上一轮的x，下面的精度比较需要用</span>        x <span class="token operator">=</span> x0 <span class="token operator">-</span> <span class="token function">f</span><span class="token punctuation">(</span>x0<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">f1</span><span class="token punctuation">(</span>x0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 核心公式</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"X: %f\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> x0<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1e-5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 精度</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="截弦法"><a href="#截弦法" class="headerlink" title="截弦法"></a>截弦法</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token comment">// 待求方程</span><span class="token keyword">double</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> x1 <span class="token operator">=</span> <span class="token number">1.4</span><span class="token punctuation">,</span> x2 <span class="token operator">=</span> <span class="token number">3.33</span><span class="token punctuation">;</span><span class="token comment">// 输入两个点，使其函数值正负相反</span>    <span class="token keyword">double</span> x<span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 截弦法核心公式</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x1 <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span> <span class="token operator">-</span> x2 <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">f</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"X: %f\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 每迭代一次输出一次</span>        <span class="token comment">// 缩小范围</span>        <span class="token comment">// 如果新的x与x1同号，则从x1侧逼近</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            x1 <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            x2 <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1e-6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 精度，注意这里的绝对值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Ans: %f"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C语言笔记：随机数</title>
    <link href="/2023/09/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <url>/2023/09/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>C语言随机数的使用方法。</p><span id="more"></span><p>原文发布于2023-03-05。</p><h2 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h2><p><code>rand()</code>生成的随机数在<code>0～RAND_MAX</code>之间。<code>RAND_MAX</code>被定义在<code>stdlib.h</code>中，其值通常是<code>INT_MAX</code>。</p><p>想要限定范围，使用<code>%</code>即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span><span class="token comment">// 提供rand()的原型</span></span><span class="token keyword">int</span> <span class="token function">rollem</span><span class="token punctuation">(</span><span class="token keyword">int</span> sides<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> roll<span class="token punctuation">;</span>    roll <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> sides <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 将随机数限定在sides范围内</span>    <span class="token keyword">return</span> roll<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="srand"><a href="#srand" class="headerlink" title="srand()"></a>srand()</h2><p>每次程序运行时，<code>rand()</code>的种子都相同，所以需要对其进行重置。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span><span class="token comment">// 为库函数srand()提供原型</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span><span class="token comment">// 为time()提供原型</span></span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 随机种子</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>time()</code>返回值的类型名是<code>time_t</code>，具体类型与系统有关。这里使用了强制类型转换。</p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C Primer Plus笔记：指针</title>
    <link href="/2023/09/C-Primer-Plus%E7%AC%94%E8%AE%B0-%E6%8C%87%E9%92%88/"/>
    <url>/2023/09/C-Primer-Plus%E7%AC%94%E8%AE%B0-%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<p>记录了一些关于指针的笔记。</p><span id="more"></span><h2 id="基本概念（P269）"><a href="#基本概念（P269）" class="headerlink" title="基本概念（P269）"></a>基本概念（P269）</h2><h3 id="地址运算符："><a href="#地址运算符：" class="headerlink" title="地址运算符：&amp;"></a>地址运算符：&amp;</h3><p>后跟一个变量名时，&amp;给出该变量的地址。</p><h3 id="地址运算符：-1"><a href="#地址运算符：-1" class="headerlink" title="地址运算符：*"></a>地址运算符：*</h3><p>后跟一个指针名或地址时，*给出储存在指针指向地址上的值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>pooh<span class="token punctuation">;</span><span class="token comment">// 把pooh的地址赋给ptr</span>val <span class="token operator">=</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token comment">// 找出ptr指向的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="声明指针"><a href="#声明指针" class="headerlink" title="声明指针"></a>声明指针</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>pi<span class="token punctuation">;</span><span class="token comment">// pi是指向int类型变量的指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">interchange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 函数调用：传递x与y的地址</span><span class="token keyword">void</span> <span class="token function">interchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>u<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 函数声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="关于数组（P280）"><a href="#关于数组（P280）" class="headerlink" title="关于数组（P280）"></a>关于数组（P280）</h3><p>可以省略方括号中的数字，让编译器自动匹配数组大小和初始化列表中的项数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> days<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>sizeof days</code>是<strong>整个数组</strong>的大小，<code>sizeof day[0]</code>是数组中<strong>一个元素</strong>的大小。整个数组的大小除以单个元素的大小就是数组元素的个数。</p><p>二维数组中，如果第1个列表中大小为12，而初始化时只有10个数，则只会初始化数组第1行的前10个元素，最后两个元素将被默认初始化为0。</p><h3 id="数组与指针（P288）"><a href="#数组与指针（P288）" class="headerlink" title="数组与指针（P288）"></a>数组与指针（P288）</h3><p>数组表示法其实是在变相地使用指针。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">flizny <span class="token operator">==</span> <span class="token operator">&amp;</span>flizny<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 数组名是该数组首元素的地址</span><span class="token keyword">int</span> dates<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>dates <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token operator">&amp;</span>date<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 相同的地址</span><span class="token operator">*</span><span class="token punctuation">(</span>dates <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> dates<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 相同的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>ar[i]</code>和<code>*(ar+i)</code>这两个表达式都是等价的。但是，只有当ar是<strong>指针变量</strong>时，才能使用<code>ar++</code>这样的表达式。</p><p>此外，间接运算符<code>*</code>的优先级高于<code>+</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>dates <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// dates第3个元素的值</span><span class="token operator">*</span>dates <span class="token operator">+</span> <span class="token number">2</span><span class="token comment">// dates第1个元素的值加2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>一元运算符<code>*</code>和<code>++</code>的优先级相同，但结合律是从右往左。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span>start<span class="token operator">++</span><span class="token comment">// *(start++)这样写更清楚，相当于移动指针再取值</span><span class="token punctuation">(</span><span class="token operator">*</span>p3<span class="token punctuation">)</span><span class="token operator">++</span><span class="token comment">// 相当于操作值，使p3指向的值自增</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="函数的数组形参（P291）"><a href="#函数的数组形参（P291）" class="headerlink" title="函数的数组形参（P291）"></a>函数的数组形参（P291）</h3><p><code>int *ar</code>形式和<code>int ar[]</code>形式都表示ar是一个指向int的指针。但<code>int ar[]</code>只有在声明函数形参时才能使用，它能够提示ar指向的不仅仅是一个int类型值，还是一个int类型的数组元素。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 下面两种形式的函数定义等价</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ar<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> ar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>此时，ar的大小是8字节。因为ar并不是数组本身，它是一个<strong>指向数组首元素的指针</strong>。我们的系统中用8字节储存地址，所以指针变量的大小是8字节。</p><h3 id="const关键字（P299）"><a href="#const关键字（P299）" class="headerlink" title="const关键字（P299）"></a>const关键字（P299）</h3><p>如果函数的意图不是修改数组中的数据内容，那么声明形参时应使用关键字<code>const</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> ar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>以上代码中的const告诉编译器，该函数不能修改ar指向的数组中的内容。如果不小心使用了类似<code>ar[i]++</code>的表达式，编译器会捕获这个错误，并生成一条错误信息。</p><p>const的指针不能用于改变值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> rates<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">,</span> <span class="token number">340</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> <span class="token operator">*</span> pd <span class="token operator">=</span> rates<span class="token punctuation">;</span><span class="token comment">// pd指向数组的首元素</span><span class="token operator">*</span>pd <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span><span class="token comment">// 不允许</span>pd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span><span class="token comment">// 不允许</span>rates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token comment">// 允许，因为rates未被const限定</span>pd<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 没问题，可以让pd指向别处</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>只能把非const数据的地址赋给普通指针，要不然通过指针就能修改const的值了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">double</span> locked<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0.08</span><span class="token punctuation">,</span> <span class="token number">0.075</span><span class="token punctuation">,</span> <span class="token number">0.0725</span><span class="token punctuation">,</span> <span class="token number">0.07</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>pnc <span class="token operator">=</span> locked<span class="token punctuation">;</span><span class="token comment">// 无效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>还可以声明并初始化一个不能指向别处的指针，这种指针可以修改指向的值，但不能指向别的地方。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> <span class="token operator">*</span> <span class="token keyword">const</span> pc <span class="token operator">=</span> rates<span class="token punctuation">;</span><span class="token comment">// pc指向数组的开始</span>pc <span class="token operator">=</span> <span class="token operator">&amp;</span>rates<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 不允许，因为该指针不能指向别处</span><span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token number">92.99</span><span class="token punctuation">;</span><span class="token comment">// 没问题，更改rates[0]的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="指针表示法（P302）"><a href="#指针表示法（P302）" class="headerlink" title="指针表示法（P302）"></a>指针表示法（P302）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> zippo<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 内含int数组的数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>因为zippo是数组首元素的地址，所以<code>zippo</code>的值和<code>&amp;zippo[0]</code>的值相同。</li><li><code>zippo[0]</code>可以表示zippo中的第一个数组，所以<code>zippo[0]</code>（相当于数组名）代表着该数组的开始地址，所以<code>zippo</code>和<code>zippo[0]</code>的值相同。</li></ul><p>但在指针移动时，二者的情况不同。</p><ul><li><code>zippo</code>指向的对象占用了两个int大小（长度为2的数组）。</li><li><code>zippo[0]</code>指向的对象只占用一个int大小（数组中的一个int元素）。</li></ul><h3 id="解引用（P302）"><a href="#解引用（P302）" class="headerlink" title="解引用（P302）"></a>解引用（P302）</h3><div class="note note-info">            <p>文字解释的是其上方的代码。</p>          </div><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">zippo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>二维数组首元素的地址（每个元素都是内含两个int类型的一维数组）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">zippo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>zippo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>二者等价。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">zippo <span class="token operator">+</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>二维数组中，第3个一维数组的地址（指向一维数组）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>zippo <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>二维数组中，第3个一维数组的<strong>首元素地址</strong>（指向int型）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>zippo <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>二维数组中，第3个一维数组中，第二个元素的<strong>地址</strong>（int）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>zippo <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>二维数组中，第3个一维数组中，第二个元素的<strong>值</strong>。</p><h3 id="指向多维数组的指针（P304）"><a href="#指向多维数组的指针（P304）" class="headerlink" title="指向多维数组的指针（P304）"></a>指向多维数组的指针（P304）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pz<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// pz指向：包含两个int类型值的数组</span><span class="token keyword">int</span> <span class="token operator">*</span>pax<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// pax是包含两个指针元素的数组，每个元素都指向int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="函数的多维数组形参（P306）"><a href="#函数的多维数组形参（P306）" class="headerlink" title="函数的多维数组形参（P306）"></a>函数的多维数组形参（P306）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>二维数组的名称可视为，一个指向长度为4的数组的指针。第二种表示方法中，空方括号表明arr是一个指针。</p><p>一般而言，声明一个指向N维数组的指针时，只能省略最左边方括号中的值。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="定义字符串（P322）"><a href="#定义字符串（P322）" class="headerlink" title="定义字符串（P322）"></a>定义字符串（P322）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 字符串字面量（字符串常量）</span><span class="token keyword">char</span> greeting<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello, and how are you today!"</span><span class="token punctuation">;</span><span class="token comment">// 编译器会自动计算数组的大小</span><span class="token keyword">const</span> <span class="token keyword">char</span> m<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"If you can't think of anything, fake it."</span><span class="token punctuation">;</span><span class="token comment">// 指针表示法</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pt1 <span class="token operator">=</span> <span class="token string">"Something is pointing at me."</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>数组形式</strong>：</p><ul><li>字符串储存在静态存储区，程序在开始运行时才会为该数组分配内存，将字符串<strong>拷贝</strong>到数组中。</li><li>此时字符串有<strong>两个副本</strong>。一个是在静态内存中的字符串字面量，另一个是储存在m数组中的字符串。</li><li>m是地址常量，不能修改，不能自增。</li></ul><p><strong>指针形式</strong>：</p><ul><li>它会为指针变量<code>pt1</code>留出一个储存位置，并把字符串的地址储存在指针变量中。</li><li><code>pt1</code>的值可以改变。</li><li>字符串字面量被视为const数据，所以应该把<code>pt1</code>声明为<strong>指向const数据</strong>的指针。因此不能使用pt1改变它所指向的数据。</li></ul><p>总之，初始化数组把静态存储区的字符串拷贝到数组中，而初始化指针只把字符串的地址拷贝给指针。</p><p>如果不修改字符串，不要用指针指向字符串字面量。</p><h3 id="字符串数组（P327）"><a href="#字符串数组（P327）" class="headerlink" title="字符串数组（P327）"></a>字符串数组（P327）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 指向字符串的指针数组</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>mytalents<span class="token punctuation">[</span>LIM<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// char 类型数组的数组</span><span class="token keyword">char</span> yourtalents<span class="token punctuation">[</span>LIM<span class="token punctuation">]</span><span class="token punctuation">[</span>SLEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>两者占用的存储空间不同，<code>yourtalents</code>中的每个元素的大小必须相同，而且必须是能储存最长字符串的大小。</p><p><code>mytalents</code>中的指针指向初始化时所用的字符串字面量的位置，这些字符串字面量<strong>被储存在静态内存</strong>中；而<code>yourtalents</code>中的数组则储存着字符串字面量的<strong>副本</strong>，所以每个字符串都被储存了两次。</p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo搭建博客的过程记录</title>
    <link href="/2023/09/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/09/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>本篇文章记录的是我使用Hexo搭建博客的过程，只涉及部分内容，仅供参考。</p><span id="more"></span><p>修改于2023-02-20发布的同名文章。</p><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装<a href="https://hexo.io/zh-cn/">Hexo</a></h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>使用npm安装好Hexo之后，新建文件夹执行初始化命令。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>在Hexo新建好所有文件后，通过<code>_config.yml</code>来配置大部分参数。该文件的所有参数说明均可在Hexo文档进行查阅，这里仅对部分内容进行强调。</p><ul><li><code>language</code>：网站使用的语言，对于简体中文用户来说设置为<code>zh-CN</code>即可。</li><li><code>url</code>：网站网址，不要忘记修改。</li><li><code>theme</code>：使用的主题名称。将会在下面的<a href="#%E4%B8%BB%E9%A2%98">主题</a>章节进行说明。</li><li><code>deploy</code>：部署部分的设置。将会在下面的<a href="#%E9%83%A8%E7%BD%B2">部署</a>章节进行说明。</li></ul><h3 id="项目文件夹"><a href="#项目文件夹" class="headerlink" title="项目文件夹"></a>项目文件夹</h3><ul><li><code>scaffolds</code>：模版文件夹。新建文章时使用layout参数选择模板。</li><li><code>source</code>：存放用户资源。大部分文章都存储在_posts下。</li><li><code>themes</code>：主题文件夹。</li></ul><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>Hexo的官网有非常多可供选择的主题，本站点使用的是<a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a>。</p><p>下面记录一下该主题的部分配置，更全面的内容请查阅<a href="https://hexo.fluid-dev.com/docs/">主题文档</a>。</p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>Hexo 5.0.0版本以上，推荐通过npm直接安装。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> hexo-theme-fluid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后在博客目录下创建<code>_config.fluid.yml</code>，将主题的<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a>内容复制过去。这样就可以在不修改主题文件的情况下进行配置。</p><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>修改Hexo博客目录中的<code>_config.yml</code>文件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> fluid  <span class="token comment">#指定主题</span><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN  <span class="token comment">#指定语言</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a>创建「关于页」</h3><p>主题的「关于页」需要手动创建<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="原文：">[1]</span></a></sup>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page about<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>创建成功后修改<code>/source/about/index.md</code>，添加layout属性。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 标题<span class="token key atrule">layout</span><span class="token punctuation">:</span> about</span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="首页图片"><a href="#首页图片" class="headerlink" title="首页图片"></a>首页图片</h3><p>首页的图片可以使用本地图片的相对路径，具体方式如下。</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">banner_img</span><span class="token punctuation">:</span> /img/bg/example.jpg   <span class="token comment"># 对应/source/img/bg/example.jpg</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>想要实现图片遮罩透明度随夜间模式变化，可使用自定义CSS。</p><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">&#123;</span>    <span class="token property">--mask-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">not</span> print</span> <span class="token punctuation">&#123;</span>    <span class="token selector">[data-user-color-scheme="dark"]</span> <span class="token punctuation">&#123;</span>        <span class="token property">--mask-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.mask</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--mask-color<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="主题颜色配置"><a href="#主题颜色配置" class="headerlink" title="主题颜色配置"></a>主题颜色配置</h3><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">color</span><span class="token punctuation">:</span>  <span class="token comment"># body 背景色</span>  <span class="token comment"># Color of body background</span>  <span class="token key atrule">body_bg_color</span><span class="token punctuation">:</span> <span class="token string">"#eee"</span>  <span class="token comment"># 暗色模式下的 body 背景色，下同</span>  <span class="token comment"># Color in dark mode, the same below</span>  <span class="token key atrule">body_bg_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#181c27"</span>  <span class="token comment"># 顶部菜单背景色</span>  <span class="token comment"># Color of navigation bar background</span>  <span class="token key atrule">navbar_bg_color</span><span class="token punctuation">:</span> <span class="token string">"#f3d379"</span>  <span class="token key atrule">navbar_bg_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#1f3144"</span>  <span class="token comment"># 顶部菜单字体色</span>  <span class="token comment"># Color of navigation bar text</span>  <span class="token key atrule">navbar_text_color</span><span class="token punctuation">:</span> <span class="token string">"#000"</span>  <span class="token key atrule">navbar_text_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#d0d0d0"</span>  <span class="token comment"># 副标题字体色</span>  <span class="token comment"># Color of navigation bar text</span>  <span class="token key atrule">subtitle_color</span><span class="token punctuation">:</span> <span class="token string">"#000"</span>  <span class="token key atrule">subtitle_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#d0d0d0"</span>  <span class="token comment"># 全局字体色</span>  <span class="token comment"># Color of global text</span>  <span class="token key atrule">text_color</span><span class="token punctuation">:</span> <span class="token string">"#3c4858"</span>  <span class="token key atrule">text_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#c4c6c9"</span>  <span class="token comment"># 全局次级字体色（摘要、简介等位置）</span>  <span class="token comment"># Color of global secondary text (excerpt, introduction, etc.)</span>  <span class="token key atrule">sec_text_color</span><span class="token punctuation">:</span> <span class="token string">"#718096"</span>  <span class="token key atrule">sec_text_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#a7a9ad"</span>  <span class="token comment"># 主面板背景色</span>  <span class="token comment"># Color of main board</span>  <span class="token key atrule">board_color</span><span class="token punctuation">:</span> <span class="token string">"#fff"</span>  <span class="token key atrule">board_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#252d38"</span>  <span class="token comment"># 文章正文字体色</span>  <span class="token comment"># Color of post text</span>  <span class="token key atrule">post_text_color</span><span class="token punctuation">:</span> <span class="token string">"#2c3e50"</span>  <span class="token key atrule">post_text_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#c4c6c9"</span>  <span class="token comment"># 文章正文字体色（h1 h2 h3...）</span>  <span class="token comment"># Color of Article heading (h1 h2 h3...)</span>  <span class="token key atrule">post_heading_color</span><span class="token punctuation">:</span> <span class="token string">"#1a202c"</span>  <span class="token key atrule">post_heading_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#c4c6c9"</span>  <span class="token comment"># 文章超链接字体色</span>  <span class="token comment"># Color of post link</span>  <span class="token key atrule">post_link_color</span><span class="token punctuation">:</span> <span class="token string">"#f6a821"</span>  <span class="token key atrule">post_link_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#f6a821"</span>  <span class="token comment"># 超链接悬浮时字体色</span>  <span class="token comment"># Color of link when hovering</span>  <span class="token key atrule">link_hover_color</span><span class="token punctuation">:</span> <span class="token string">"#c47f08"</span>  <span class="token key atrule">link_hover_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#c47f08"</span>  <span class="token comment"># 超链接悬浮背景色</span>  <span class="token comment"># Color of link background when hovering</span>  <span class="token key atrule">link_hover_bg_color</span><span class="token punctuation">:</span> <span class="token string">"#f8f9fa"</span>  <span class="token key atrule">link_hover_bg_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#364151"</span>  <span class="token comment"># 分隔线和表格边线的颜色</span>  <span class="token comment"># Color of horizontal rule and table border</span>  <span class="token key atrule">line_color</span><span class="token punctuation">:</span> <span class="token string">"#eaecef"</span>  <span class="token key atrule">line_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#435266"</span>  <span class="token comment"># 滚动条颜色</span>  <span class="token comment"># Color of scrollbar</span>  <span class="token key atrule">scrollbar_color</span><span class="token punctuation">:</span> <span class="token string">"#c4c6c9"</span>  <span class="token key atrule">scrollbar_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#687582"</span>  <span class="token comment"># 滚动条悬浮颜色</span>  <span class="token comment"># Color of scrollbar when hovering</span>  <span class="token key atrule">scrollbar_hover_color</span><span class="token punctuation">:</span> <span class="token string">"#a6a6a6"</span>  <span class="token key atrule">scrollbar_hover_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#9da8b3"</span>  <span class="token comment"># 按钮背景色</span>  <span class="token comment"># Color of button</span>  <span class="token key atrule">button_bg_color</span><span class="token punctuation">:</span> <span class="token string">"transparent"</span>  <span class="token key atrule">button_bg_color_dark</span><span class="token punctuation">:</span> <span class="token string">"transparent"</span>  <span class="token comment"># 按钮悬浮背景色</span>  <span class="token comment"># Color of button when hovering</span>  <span class="token key atrule">button_hover_bg_color</span><span class="token punctuation">:</span> <span class="token string">"#f2f3f5"</span>  <span class="token key atrule">button_hover_bg_color_dark</span><span class="token punctuation">:</span> <span class="token string">"#46647e"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>搜索输入框选中时的颜色可以通过自定义css实现。</p><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.md-form input[type]:focus:not([readonly]) + label</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #f6a821<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.md-form input[type]:focus:not([readonly])</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #f6a821<span class="token punctuation">;</span>    <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> 0 1px 0 0 #f6a821<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 1px 0 0 #f6a821<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>本站对<code>&lt;strong&gt;</code>标签的样式进行了修改，使其更加醒目。</p><figure><div class="code-wrapper"><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.markdown-body strong</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline double #f3d379<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h3><p>若需要手动指定首页的文章摘要，可以使用<code>&lt;!-- more --&gt;</code>在markdown文件里划分。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">正文的一部分作为摘要<span class="token comment">&lt;!-- more --></span>余下的正文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><p>在markdown中加入如下代码来使用便签<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="原文：">[2]</span></a></sup>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% note success %&#125;内容&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>所有的便签类型如下。</p><div class="note note-primary">            <p>primary</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-success">            <p>success</p>          </div><div class="note note-danger">            <p>danger</p>          </div><div class="note note-info">            <p>info</p>          </div><p>Tag插件的其他类型详见<a href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6">文档</a>。</p><h3 id="自带页面相关文本"><a href="#自带页面相关文本" class="headerlink" title="自带页面相关文本"></a>自带页面相关文本</h3><p>Fluid主题提供了一些自带的页面，如归档、分类、友链等。修改这些页面中的文字需要配置主题的语言文件，可通过创建自定义语言文件的方式修改其内容。</p><ol><li>进入博客目录的<code>source/_data</code>目录（如不存在则创建），创建<code>languages</code>文件夹</li><li>在<code>source/_data/languages</code>文件夹下创建<code>xxx.yml</code>文件（xxx替换为对应语言的代码，例如<code>zh-CN</code>）</li><li>将<a href="https://github.com/fluid-dev/hexo-theme-fluid/tree/master/languages">fluid&#x2F;languages</a>下对应语言的配置内容复制到<code>xxx.yml</code>中</li><li>之后在<code>xxx.yml</code>中修改即可，配置会在<code>hexo g</code>时自动覆盖</li></ol><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>在文章页的配置中，可对脚注部分进行设置。</p><p>注意，脚注的节标题需要给h2标签设置id，否则会造成目录无法跳转的问题。</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">footnote</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 脚注的节标题，也可以在 front-matter 中通过 `footnote: &lt;h2>Reference&lt;/h2>` 这种形式修改单独页面的 header</span>    <span class="token key atrule">header</span><span class="token punctuation">:</span> <span class="token string">'&lt;h2 id="注释">注释&lt;/h2>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>layout</code>为布局模板名称，留空则使用默认的post。</p><p>若标题包含空格须使用引号。</p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>可简化为<code>hexo g</code>。</p><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>启动后可通过<a href="http://localhost:4000/">http://localhost:4000</a>预览网站。</p><h3 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>可简化为<code>hexo d</code>。</p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Front-matter是文件最上方以<code>---</code>分隔的区域，可用来配置文件的部分参数。</p><p>例如本文章的Front-matter如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 使用Hexo搭建博客的过程记录<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2023-09-26</span><span class="token key atrule">category</span><span class="token punctuation">:</span> 过程记录</span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>部分可设置的参数如下。</p><ul><li><code>title</code>：文章标题</li><li><code>date</code>：发布日期</li><li><code>updated</code>：更新日期</li><li><code>layout</code>：布局模板</li><li><code>categories</code>：分类</li><li><code>tags</code>：标签</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>这里只考虑部署至Github Pages的情况<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Hexo+GitHub搭建个人博客教程（2023最新版）](https://blog.csdn.net/qq_62928039/article/details/130248518)">[3]</span></a></sup>。</p><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>仓库名设置为<code>[username].github.io</code>，这样就会被识别为Github Pages。</p><h3 id="生成SSH"><a href="#生成SSH" class="headerlink" title="生成SSH"></a>生成SSH</h3><p>使用Git Bash设置用户名和邮箱。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token punctuation">[</span>yourname<span class="token punctuation">]</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token punctuation">[</span>youremail<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>使用以下语句检查设置的内容。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name<span class="token function">git</span> config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>接下来就可以创建SSH了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token punctuation">[</span>youremail<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后找到<code>id_rsa.pub</code>文件（公共秘钥），默认路径为<code>C:\Users\用户名\.ssh</code>。</p><p>我们需要在Github中配置SSH秘钥。进入Github，Settings -&gt; SSH and GPG keys -&gt; SSH keys -&gt; New SSH key。</p><p>新建一个SSH key，将<code>id_rsa.pub</code>文件中的内容复制到里面。</p><h3 id="部署至仓库"><a href="#部署至仓库" class="headerlink" title="部署至仓库"></a>部署至仓库</h3><p>修改根目录下的<code>_config.yml</code>文件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token key atrule">type</span><span class="token punctuation">:</span> git<span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span><span class="token punctuation">[</span>username<span class="token punctuation">]</span>/<span class="token punctuation">[</span>username<span class="token punctuation">]</span>.github.io.git<span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>此时还需要安装部署到Github的插件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>之后即可进行构建和部署。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>编辑好内容最好先<code>hexo s</code>本地预览，修改妥当后再<code>hexo d</code>部署到远程仓库中。</p><h2 id="另见"><a href="#另见" class="headerlink" title="另见"></a>另见</h2><ul><li><a href="https://easyhexo.com/">Easy Hexo</a></li><li><a href="https://blog.csdn.net/sinat_17775997/article/details/83821027">浅析Hexo搭建博客的原理</a></li></ul><section class="footnotes"><h2 id="注释">注释</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>原文：<a href="https://hexo.fluid-dev.com/docs/start/#%E5%88%9B%E5%BB%BA%E3%80%8C%E5%85%B3%E4%BA%8E%E9%A1%B5%E3%80%8D">https://hexo.fluid-dev.com/docs/start/#%E5%88%9B%E5%BB%BA%E3%80%8C%E5%85%B3%E4%BA%8E%E9%A1%B5%E3%80%8D</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>原文：<a href="https://hexo.fluid-dev.com/docs/guide/#%E4%BE%BF%E7%AD%BE">https://hexo.fluid-dev.com/docs/guide/#%E4%BE%BF%E7%AD%BE</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/qq_62928039/article/details/130248518">Hexo+GitHub搭建个人博客教程（2023最新版）</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程与记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第一篇文章</title>
    <link href="/2023/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2023/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><del>比起两年前的随心折腾，这次的搭建顺利了许多，得益于之前鼓捣过的一些小项目，现在在调整一些配置的时候起码知道自己在干什么了。</del></p><p><del>不过学习之路本就漫长，尤其是对我这种菜鸟来说。所以之后会在这里进行一些记录和摘抄，希望能够创造或整理一些有价值的内容。</del></p><span id="more"></span><p>上述文本写于2023-02-18，没想到只隔了这么短的时间，就又要重新开始「第一篇文章」。虽然前方尽是迷雾，一切扑朔迷离，但文字依旧有着它的力量。我相信这种力量。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
